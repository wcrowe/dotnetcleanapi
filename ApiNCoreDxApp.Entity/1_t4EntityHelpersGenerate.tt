<#@ include file="../ApiNCoreDxApp.Entity/TemplateCommon.tt"#>

<#
	var tc = new TemplateCommon();

	//get list of entity classes
	List<EnvDTE.CodeClass> entityClassesNotExistsinDomain = tc.GetClassesToCreate(false,"ApiNCoreDxApp.Entity", "BaseEntity","ApiNCoreDxApp.Domain", "BaseDomain","ViewModel");
	EnvDTE.CodeClass baseEntityClass = tc.GetClassByProjectNameAndClassName("ApiNCoreDxApp.Entity", "BaseEntity");

#>
// —————————————— 
// <auto-generated> 
//	This code was auto-generated <#= DateTime.Now #>
//     	T4 template generates query and migration code/db script for added entity classes  
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution or .
// <auto-generated> 
// —————————————–

using System;
using System.Collections.Generic;
using System.Text;
using FluentMigrator;

namespace ApiNCoreDxApp.Entity.Queries
{
<#
	foreach(EnvDTE.CodeClass cl in entityClassesNotExistsinDomain)
	{
	var entityName = cl.Name;

	#>

	//Query class for entity <#= entityName #>
	//T4 generated - MANUAL UPDATES COULD BE REQUIRED! 
	//Assumptions: entity class BaseEntity not changed; database name the same as solution name
	//Future versions of this T4 script will have less assumptions more smart code generation. Check for future the extension's updates! 
    public class <#= entityName #>Query : IQuery
    {
		<#
        	var props = tc.GetAllProperties(cl);
			var insfieldlist="";
			var insparmlist="";
			var updatelist="";
			foreach(var prop in props)
			{
				var propn = prop.Name;
				insfieldlist += propn + ",";
				insparmlist += "@" + propn + ",";
				updatelist += propn + "=@" + propn + ",";
			}
			//NOTE: assumption is that this exists in every entity class 
			//TODO: Get it from base class using T4
			insfieldlist = insfieldlist + "TestText, Created, Modified";
			insparmlist = insparmlist + "@TestText,GETUTCDATE(),GETUTCDATE()";
			updatelist = updatelist +  "TestText=@TestText, Modified=GETUTCDATE()";
		 #>
	readonly string selectAll = "SELECT * FROM <#= entityName #>s";
        readonly string selectOne = "SELECT * FROM <#= entityName #>s WHERE Id = @Id";
        readonly string insert = "INSERT INTO <#= entityName #>s (<#= insfieldlist #>)"
                             + " VALUES(<#= insparmlist #>);"
                             + "SELECT CAST(SCOPE_IDENTITY() as int)";
        readonly string update = "IF NOT EXISTS (SELECT * FROM <#= entityName #>s WHERE Id = @Id) SELECT 0 "
                               + "ELSE IF NOT EXISTS (SELECT * FROM <#= entityName #>s WHERE RowVersion = @RowVersion) SELECT -1 ELSE SELECT 1;"
                               + "UPDATE <#= entityName #>s SET <#= updatelist #>"
                               + " WHERE Id = @Id AND RowVersion = @RowVersion";
        readonly string delete = "IF NOT EXISTS (SELECT * FROM <#= entityName #>s WHERE Id = @Id) SELECT 0 "
                               + "ELSE SELECT 1;"
                                + "DELETE FROM <#= entityName #>s"
                                + " WHERE Id = @Id";
        string IQuery.SelectAll => selectAll;
        string IQuery.SelectOne => selectOne;
        string IQuery.Insert => insert;
        string IQuery.Update => update;
        string IQuery.Delete => delete;

	}

<#
   }
#>

	public partial class QueryBuilder
	{
		partial void SearchAdditionalEntityTypes(Type type, ref IQuery query)
		{
		  switch (type.ToString())
            {
			<#
			foreach(EnvDTE.CodeClass cl in entityClassesNotExistsinDomain)
			{
				var entityName = cl.Name;
			#>

                case "ApiNCoreDxApp.Entity.<#= entityName #>":
                    query = new <#= entityName #>Query();
                    break;
			<#
			}
			#>
                default:
                    break;
            }

		}
	}

}


namespace ApiNCoreDxApp.Entity.Migrations
{
    public partial class Migration_Initial : Migration
    {
		//Migrations code/dbscript for added entities
		//T4 generated - MANUAL UPDATES COULD BE REQUIRED! 
		//Assumptions: entity class BaseEntity not changed; database name the same as solution name; limited column type conversion
		//Future versions of this T4 script will have less assumptions more smart code generation. Check for future the extension's updates! 
        partial void AdditionalMigrationUp()
        {
<#
foreach(EnvDTE.CodeClass cl in entityClassesNotExistsinDomain)
{
var entityName = cl.Name;
var props = tc.GetAllProperties(cl);
var baseClassProps = tc.GetAllProperties(baseEntityClass); //todo - add from base class not assume unchanged
var fieldlist="[Id] [int] IDENTITY(1,1) NOT NULL,\r\n\t\t\t\t\t[Created] [datetime2](7) NOT NULL,\r\n\t\t\t\t\t[Modified] [datetime2](7) NOT NULL,\r\n\t\t\t\t\t";
foreach(var prop in props)
{
	var propn = prop.Name;
	var propt = prop.Type.AsString;
	var dbprop = "todetermine";
		if(propt=="string") 
		dbprop="[nvarchar](100) NULL";
	else if(propt=="bool") 
		dbprop="[bit] NULL";
	else if(propt.ToLower()=="system.datetime") 
		dbprop="[datetime2](7) NULL";
	else if(propt.ToLower()=="int") 
		dbprop="[int] NULL";
	else if(propt.ToLower()=="decimal") 
		dbprop="[decimal] NULL";
    else if(propt.ToLower()=="double") 
		dbprop="[double] NULL";
	fieldlist += "[" + propn + "] "  + dbprop + ",\r\n\t\t\t\t\t";
}
	fieldlist = fieldlist + "[RowVersion] [rowversion] NULL,\r\n\t\t\t\t\t[TestText] [nvarchar](50) NULL";

#>		
			Execute.Sql(@"
			USE ApiNCoreDxApp;
			IF OBJECT_ID('<#= entityName #>s') IS NULL 
			BEGIN
				CREATE TABLE [dbo].[<#= entityName #>s](
					<#= fieldlist #>
				CONSTRAINT [PK_<#= entityName #>s] PRIMARY KEY CLUSTERED 
				(
					[Id] ASC
				)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                        ) ON [PRIMARY]
                        END
				");

<#
}
#>
		}

		partial void AdditionalMigrationDown()
        {
<#
foreach(EnvDTE.CodeClass cl in entityClassesNotExistsinDomain)
{
var entityName = cl.Name;
#>
			Execute.Sql(@"
			USE ApiNCoreDxApp;
			DROP TABLE IF EXISTS [dbo].[<#= entityName #>s]");
<#
}
#>

		}

	}

}

