
<#@ include file="../../ApiNCoreDxApp.Entity/TemplateCommon.tt"#>

<#
	var tc = new TemplateCommon();

	//get list of entity classes to use as templates to create domain classes
	List<EnvDTE.CodeClass> entityClassesNotExistsinDomain = tc.GetClassesToCreate(false,"ApiNCoreDxApp.Entity", "BaseEntity","ApiNCoreDxApp.Domain", "BaseDomain","ViewModel");
#>
// —————————————— 
// <auto-generated> 
//	This code was auto-generated <#= DateTime.Now #> 
//	T4 template generates viewmodel's code 
//	NOTE:T4 generated code may need additional updates/addjustments by developer in order to compile a solution.
// <auto-generated> 
// —————————————–
using System;
using System.Collections.Generic;
namespace ApiNCoreDxApp.Domain
{
<#
	//create domain classes
	foreach(EnvDTE.CodeClass cl in entityClassesNotExistsinDomain)
	{
	var entityName = cl.Name;
	#>

    /// <summary>
    ///
    /// A <#= entityName #> view model
    ///   
    ///       MANUAL UPDATES REQUIRED! 
    ///       NOTE use PM console to update database with new entity : 
    ///            PM>add-migration Add<#= entityName #>
    ///            PM>update-database
    ///
    /// </summary>
    public class <#= entityName #>ViewModel : BaseDomain
    {
	  <#
	    	var props = tc.GetAllProperties(cl);
		foreach(var prop in props)
		{
			var propn = prop.Name;
			EnvDTE.CodeTypeRef codeTypeRef = prop.Type;
			var propt = codeTypeRef.AsString;
			if(propt.Contains("ApiNCoreDxApp.Entity."))
			{
				propt = "virtual " + propt.Replace("ApiNCoreDxApp.Entity.","");
				if(propt.Contains(">"))
					propt = propt.Replace(">","") + "ViewModel>";
				else
					propt = propt + "ViewModel";
			}
	  #>
		public <#= propt #> <#= propn #> { get; set; } 
	<#
	}
	#>
} 
	<#
	}
#>
     
}